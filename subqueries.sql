
--1. From the following tables, write a SQL query to find all the orders issued by the salesman 'Paul Adam'. 
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select ord_no, purch_amt,ord_date,customer_id, salesman_id
from orders
where salesman_id in (select salesman_id from salesman where name = 'Paul Adam')

--2. From the following tables write a SQL query to find all orders generated by London-based salespeople. 
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select ord_no, purch_amt, ord_date,customer_id, salesman_id
from orders 
where salesman_id in (select salesman_id from salesman where city= 'London')


--3. From the following tables write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 3007. 
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select ord_no, purch_amt, ord_date,customer_id, salesman_id
from orders 
where salesman_id in (select distinct salesman_id from orders where customer_id = 3007)


--4. From the following tables write a SQL query to find the order values greater than the average order value of 10th October 2012. 
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id.
select ord_no, purch_amt, ord_date, customer_id, salesman_id
from orders
where purch_amt > (select avg(purch_amt) from orders where ord_date = '2012-10-10' )


--5. From the following tables, write a SQL query to find all the orders generated in New York city. 
-- Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select ord_no, purch-amt, ord_date,customer_id, salesman_id
from orders 
where salesman_id in (select salesman_id from salesman where city = 'New York')


--6. From the following tables write a SQL query to determine the commission of the salespeople in Paris. Return commission.
select commission from salesman 
where salesman_id = (select salesman_id from customer where city= 'paris')


--7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
select * from customers 
where customer_id < (select salesman_id-2001 from salesman where name = 'Mc Lyon')


--8. From the following tables write a SQL query to count the number of customers with grades above the average in New York City. 
-- Return grade and count.  
select grade, count(*) from customer 
group by grade
having grades > (select avg(grade) from customer where city = 'New York' )


--9. From the following tables, write a SQL query to find those salespeople who earned the maximum commission. 
-- Return ord_no, purch_amt, ord_date, and salesman_id. 
select ord_no, purch_amt, ord_date, salesman_id from orders
where salesman_id in (select salesman_id from salesman where commission = (select max(commission) from salesman ))

--10. From the following tables write SQL query to find the customers who placed orders on 17th August 2012. 
-- Return ord_no, purch_amt, ord_date, customer_id, salesman_id and cust_name.
select ord_no, purch_amt, ord_date, customer_id, o.salesman_id from orders o, Customer c 
where c.customer_id= o.customer_id and o.ord_date='2012-08-17';

```
--11. From the following tables write a SQL query to find salespeople who had more than one customer. 
--Return salesman_id and name. 
SELECT salesman_id,name 
FROM salesman a 
WHERE 1 < 
    (SELECT COUNT(*) 
     FROM customer 
     WHERE salesman_id=a.ç
     (group by customer_id));
```

--12. From the following tables write a SQL query to find those orders, which are higher 
--than the average amount of the orders. 
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select ord_no, purch_amt, ord_date, customer_id, o.salesman_id from orders o
where purch_amt > (avg(purch_amt) from orders group by customer_id)

--13. From the following tables write a SQL query to find those orders that are equal or higher 
--than the average amount of the orders. 
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id. 
select ord_no, purch_amt, ord_date, customer_id, o.salesman_id from orders o
where purch_amt >= (avg(purch_amt) from orders group by customer_id)


--14. Write a query to find the sums of the amounts from the orders table, grouped by date, and 
-- eliminate all dates where the sum was not at least 1000.00 above the maximum order amount for that date.
select ord_date, sum(purch_amt) from orders a
group by ord_date
having sum(purch_amt)> (1000 + sum(purch_amt) from orders v where a.ord_date = b.ord_date)

--15. Write a query to extract all data from the customer table if and only if one or more of the 
--customers in the customer table are located in London.
select * from customer where exists (select city from customer where city = 'LONDON' )

--16. From the following tables write a SQL query to find salespeople who deal with multiple customers.
-- Return salesman_id, name, city and commission. 


--17. From the following tables write a SQL query to find salespeople who deal with a single customer.
-- Return salesman_id, name, city and commission.



--18. From the following tables, write a SQL query to find the salespeople who deal the customers 
-- with more than one order. Return salesman_id, name, city and commission


--19. From the following tables write a SQL query to find the salespeople who deal with those 
--customers who live in the same city. Return salesman_id, name, city and commission. 



--20. From the following tables write a SQL query to find salespeople whose place of residence 
--matches any city where customers live. Return salesman_id, name, city and commission.



--21. From the following tables write a SQL query to find all those salespeople whose names appear 
--alphabetically after the customer’s name. Return salesman_id, name, city, commission.




select concat(firstname, ' ', surname) as member, f.name as facility, f.guestcost as cost
from cd.members m, cd.bookings b, cd.facilities f
where m.memid= b.memid and b.facid=f.facid
 and b.starttime = convert(date, getdate()) as [Date] and f.guestcost > 30
order by f.guestcost desc



select f.facid, sum(b.slots) 
from cd.bookings b, cd.facilities f
where f.facid = b.facid
and date_part('month', b.starttime) = '09' and  date_part('year', b.starttime) = '2012'
group by  f.facid
order by sum(b.slots) 

select b.facid, date_part('month', b.starttime) as month, sum(b.slots) as "Total Slots"
from cd.bookings b
where date_part('year', b.starttime) = '2012'
group by  b.facid, date_part('month', b.starttime)
order by b.facid


select name, sum(membercost) 
from cd.facilities f
group by name
order by sum(membercost) 